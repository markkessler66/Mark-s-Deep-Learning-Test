import os
import cv2 
from tqdm import tqdm
import numpy as np

import torch
import torchvision
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

"""


NOTE: DATA SET USED WAS "KAGGLE DOGS AND CATS". YOU CAN DOWNLOAD ON MICROSOFTS WEBSITE 


"""




REBUILD_DATA = False

class CatsNDogs():
    Im_Size = (100,100)
    CATS = 'PetImages/Cat' #directory of cat images folder
    DOGS = 'PetImages/Dog' #directory of dog images folder
    LABELS = {CATS:0, DOGS:1}
    training_data = []
    cat_count = 0
    dog_count = 0

    def make_training_data(self):
        for label in self.LABELS:
            for im in tqdm(os.listdir(label)):
                try:
                    path = os.path.join(label, im)
                    img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
                    img = cv2.resize(img, self.Im_Size)
                    self.training_data.append([np.array(img),np.eye(2)[self.LABELS[label]]])

                    if label == self.CATS:
                        self.cat_count += 1
                    else:
                        self.dog_count += 1
                except:
                    pass

        np.random.shuffle(self.training_data)
        np.save('training_Data.npy',self.training_data)
        print(f'cats: {dogsvcats.cat_count}')
        print(f'dogs: {dogsvcats.dog_count}')

if REBUILD_DATA:
    dogsvcats = CatsNDogs()
    dogsvcats.make_training_data()



training_data = np.load('training_Data.npy',allow_pickle = True)

class Net(nn.Module):
    def __init__(self):
        super().__init__()
        
        self.conv1 = nn.Conv2d(1, 32, 5)
        self.conv2 = nn.Conv2d(32, 64, 5)
        self.conv3 = nn.Conv2d(64, 128, 5)

        x = torch.randn(100,100).view(-1,1,100,100)
        self._to_linear = None
        self.convs(x)

        self.fc1 = nn.Linear(self._to_linear, 512)
        self.fc2 = nn.Linear(512, 2)


    def convs(self, x):
        x = F.max_pool2d(F.relu(self.conv1(x)),(2,2))
        x = F.max_pool2d(F.relu(self.conv2(x)),(2,2))
        x = F.max_pool2d(F.relu(self.conv3(x)),(2,2))

        if self._to_linear is None:
            self._to_linear = x[0].shape[0]*x[0].shape[1]*x[0].shape[2]

        return x

    
    def forward(self, x):
        x = self.convs(x)
        x = x.view(-1,self._to_linear)

        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return F.softmax(x,dim=1)





net = Net()


optimizer = optim.Adam(net.parameters(),lr=.001)
loss_func = nn.MSELoss()

X = torch.Tensor([i[0] for i in training_data]).view(-1,100,100)
X = X/255.0
y = torch.Tensor([i[1] for i in training_data])

VAL_PCT = .1
val_size = int(len(X)*VAL_PCT)

X_train = X[:-val_size]
X_test = X[-val_size:]
Y_train = y[:-val_size]
Y_test = y[-val_size:]


BATCH_SIZE = 64

EPOCHS = 5

for epoch in range(EPOCHS):
    for i in range(0,len(X_train),BATCH_SIZE):
        batch_X = X_train[i:i+BATCH_SIZE].view(-1,1,100,100)
        batch_y = Y_train[i:i+BATCH_SIZE]

        net.zero_grad()
        outputs = net(batch_X)
        loss = loss_func(outputs, batch_y)
        loss.backward()
        optimizer.step()

print(loss)

correct=0
total=0

with torch.no_grad():
    for i in range(len(X_test)):
        real_class = torch.argmax(Y_test[i])
        net_out = net(X_test[i].view(-1,1,100,100))[0]
        predicted = torch.argmax(net_out)
        if predicted == real_class:
            correct+=1
        total+=1

print(f'Accurancy: {round(correct/total, 3)}')
    

